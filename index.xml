<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>命令库</title>
    <link>https://hongmao.run/cmd/</link>
    <description>Recent content on 命令库</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 06 Aug 2022 11:51:28 +0800</lastBuildDate><atom:link href="https://hongmao.run/cmd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常用命令</title>
      <link>https://hongmao.run/cmd/conda/01-common/</link>
      <pubDate>Sun, 20 Feb 2022 13:57:45 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/conda/01-common/</guid>
      <description># 查看帮助信息 conda -h # 查看create命令的帮助信息 conda create -h # 查看conda版本 conda -V 配置 # 展示所有确定的配置源 conda config --show-sources # 设置清华大学的仓库镜像（注意：越往后增加的渠道，其优先级越高） conda config --add channels &amp;lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/&amp;gt; conda config --add channels &amp;lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/&amp;gt; conda config --add channels &amp;lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/&amp;gt; conda config --set show_channel_urls yes # 删除下载渠道 conda config --remove channels &amp;lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge&amp;gt; # 查看各下载渠道优先级 conda config --get channels 环境管理 # 创建一个环境 conda create --name py39 python=3.9 # 查看所有的环境信息 (base) D:\\app\\Anaconda&amp;gt;conda info -e # conda environments: # base * D:\\app\\Anaconda py39 D:\\app\\Anaconda\\envs\\py39 # 由此可以看到前面的&amp;#34;(base)&amp;#34;指的就是当前环境，默认就是base # 切换当前环境到py39 (base) D:\\app\\Anaconda&amp;gt;conda activate py39 (py39) D:\\app\\Anaconda&amp;gt; # 可以看到，前面的环境信息已经由&amp;#34;(base)&amp;#34;切换到&amp;#34;(py39)&amp;#34; # 切换回base环境 conda activate base # 或者，也可以这样 conda deactivate # 删除一个已有的环境：py39 conda remove --name py39 --all 包管理 # 查询包 conda search pandas # 安装pandas包 conda install pandas # 在指定的下载渠道&amp;#34;conda-forge&amp;#34;安装fastapi包 conda install -c conda-forge fastapi # 查看当前环境已安装的包 conda list # 移除pandas包 conda remove pandas # 更新conda conda update conda </description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://hongmao.run/cmd/homebrew/01-common/</link>
      <pubDate>Sat, 04 Sep 2021 09:05:42 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/homebrew/01-common/</guid>
      <description># 查看homebrew版本 brew -v # 查看帮助 brew help # 查看某命令的文档 brew help [COMMAND] # 例如： brew help search # 搜索软件包 brew search 文本 # 也可以简写： brew -S 文本 # 例如： brew search openjdk # 或 brew -S openjdk # 查看指定软件包的具体信息（可以是已安装的，也可以是未安装的） brew info 包名 # 例如： brew info python # 安装软件包 brew install 包名 # 例如： brew install python # 更新库（并不是更新所有本地已安装的软件包，执行完此命令后，就可以看到哪些包可以升级了） brew update # 查看过时的软件包 brew outdated # 升级指定包 brew upgrade 包名 # 例如： brew upgrade python # 升级所有可升级的包 brew upgrade # 卸载指定包 brew uninstall 包名 # 例如： brew uninstall python # 查看本地安装的所有软件包 brew list brew services # 查看使用brew安装的服务 brew services # 启动服务 brew services start 包名 # 例如： brew services start nginx # 停止服务 brew services stop 包名 # 例如： brew services stop nginx # 重启服务 brew services restart 包名 # 例如： brew services restart nginx # 清理已卸载的软件包的服务配置 brew services cleanup </description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://hongmao.run/cmd/redis/01-common/</link>
      <pubDate>Thu, 02 Sep 2021 23:29:26 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/redis/01-common/</guid>
      <description></description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://hongmao.run/cmd/nodejs/01-common/</link>
      <pubDate>Thu, 02 Sep 2021 23:29:20 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/nodejs/01-common/</guid>
      <description># 查看Node.js版本 node -v # 或 node --version # 查看帮助文档 node -h # 或 node --help </description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://hongmao.run/cmd/linux/01-common/</link>
      <pubDate>Thu, 02 Sep 2021 23:29:13 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/linux/01-common/</guid>
      <description># 使用scp传输文件 scp 源文件 目标服务器用户名@目标服务器地址:目标文件或目标文件存放的目录 # 例如，将当前目录下的nginx-1.21.6.tar.gz文件传输至192.168.0.201服务器的hongmao用户的家目录下： scp nginx-1.21.6.tar.gz hongmao@192.168.0.201:~/ </description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://hongmao.run/cmd/hugo/01-common/</link>
      <pubDate>Thu, 02 Sep 2021 23:29:08 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/hugo/01-common/</guid>
      <description># 查看Hugo版本 hugo version # 查看帮助文档 hugo help # 创建一个Hugo站点项目 hugo new site 项目名 # 例如： hugo new site &amp;#34;blog&amp;#34; # 创建一篇文章，默认路径是在项目根目录的content目录下 hugo new 文章路径及文章名 # 例如：在content目录下的posts目录下创建文章“first.md” hugo new posts/first.md # 依据模板创建文章或目录 hugo new --kind 模板名 文章路径及文章名 # 假设在archetypes目录下定义了名为“dir”的模板，则可以使用此模板创建文件： hugo new --kind dir &amp;#34;myDir&amp;#34; # 启动本地服务 hugo server # 启动本地服务（包括状态为“草稿”的文章） hugo server -D # 指定主题启动 hugo server theme=your_theme_name # 生成静态资源文件 hugo # 生成静态资源文件（包括状态为“草稿”的文章） hugo -D </description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://hongmao.run/cmd/git/01-common/</link>
      <pubDate>Thu, 02 Sep 2021 23:29:03 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/git/01-common/</guid>
      <description></description>
    </item>
    
    <item>
      <title>常用命令</title>
      <link>https://hongmao.run/cmd/docker/01-common/</link>
      <pubDate>Thu, 02 Sep 2021 23:28:54 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/docker/01-common/</guid>
      <description># 查看docker版本 docker version # 如下命令显示有关Docker安装的系统范围信息。显示的信息包括内核版本、容器数量和镜像数量。 docker info # 查看帮助信息 docker help # 查看某具体命令的帮助信息 docker COMMAND --help # 例如： docker run --help # 显示容器资源使用统计信息的实时流 docker stats 使用镜像 # 查询镜像 docker search [OPTIONS] TERM # 例如： docker search tomcat # 拉取镜像 docker pull [OPTIONS] NAME[:TAG|@DIGEST] # 例如，拉取最新版本的tomcat镜像： docker pull tomcat # 拉取指定版本的tomcat镜像： docker pull tomcat:9.0 # 列出所有镜像 docker images 容器管理 # 基于指定镜像运行一个容器（相当于docker create之后再docker start） docker run [OPTIONS] IMAGE [COMMAND] [ARG...] # 例如： docker run --name myTomcat -d -p 8888:8080 tomcat # 运行一个容器时可以指定的选项非常多，例如上面通过“--name myTomcat”指定容器名称为“myTomcat”， # “-d”表示：在后台运行容器并打印容器ID # “-p 8888:8080”表示：将容器的端口（8080）发布到主机（8888），之后访问就使用主机的ip加8888端口访问 # 除此之外，还有如下常用选项： # -a 用于在创建容器时绑定到容器的STDIN、STDOUT或STDERR。这使得可以根据需要操纵输出和输入。 # 例如： docker run --name myStdOut -a stdout ubuntu echo heihei # 然后查看日志，即可看到“heihei” docker logs myStdOut # -e 设置环境变量 docker run -d -e NGINX_ENTRYPOINT_QUIET_LOGS=1 nginx # -i 即使未连接上，也保持标准输入是打开的，常与-t一起使用 # -t 分配一个伪终端 # 例如： docker run -it ubuntu root@c3afdbe94451:/# ls bin boot dev etc home lib media mnt opt proc root run sbin srv sys tmp usr var root@c3afdbe94451:/# exit exit # --link 添加指向另一个容器的链接（目前已过时，可能会在将来的版本中删除） # 建议用用户定义的网络来达成容器间的通信，但是用户定义网络无法解决的问题是在容器间共享变量， # 但是可以通过其他机制如数据卷来实现这一目的。 # -m 内存限制 # --net 将容器连接到网络，假设我们已经通过docker network create创建了名为elastic的网络 docker run -d --name myEs --net elastic -p 9200:9200 -p 9300:9300 -e &amp;#34;discovery.</description>
    </item>
    
    <item>
      <title>yum</title>
      <link>https://hongmao.run/cmd/linux/02-yum/</link>
      <pubDate>Sun, 07 Nov 2021 09:41:40 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/linux/02-yum/</guid>
      <description># 查看帮助信息 yum help # 查看已配置的源 yum repolist # 检查是否有可用的软件包更新 check-update # 在软件包名及详细信息中搜索指定字符串 yum search &amp;lt;str&amp;gt; # 例如： yum search nginx # 若想扩大搜索范围，不止在名称和简介中搜索，可以使用： yum search all nginx # 列出所有软件包（会按已安装的和可安装的进行区分） yum list # 列出指定软件包 yum list &amp;lt;package-name&amp;gt; # 例如: yum list nginx # 也可以同时查询多个，例如： yum list docker nginx # 列出已安装的软件包 yum list installed # 列出已安装的包名包含指定字符串的包 yum list installed | grep &amp;lt;string&amp;gt; # 例如： yum list installed | grep docker # 查看软件包的详细信息 yum info &amp;lt;package-name&amp;gt; # 例如： yum info docker # 向系统中安装一个或多个软件包 yum install &amp;lt;package-1&amp;gt; &amp;lt;package-2&amp;gt; # 例如： sudo yum install docker-ce docker-ce-cli containerd.</description>
    </item>
    
    <item>
      <title>docker-compose</title>
      <link>https://hongmao.run/cmd/docker/02-docker-compose/</link>
      <pubDate>Tue, 05 Oct 2021 10:56:54 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/docker/02-docker-compose/</guid>
      <description>使用Docker定义和运行多容器应用程序。
# 查看帮助信息 docker-compose --help # 查看版本信息 docker-compose version docker-compose.yml Compose文件是定义服务、网络和卷的YAML文件。默认路径是./docker-compose.yml。
使用Docker Compose来编排多个服务，但也可以仅“编排”一个服务，如下展示了仅启动Nginx服务的docker-compose.yml文件：
version: &amp;#34;3.9&amp;#34; services: myNginx: image: nginx ports: - 8080:80 docker-compose操作 注：docker-compose相关命令如果不在拥有Compose文件的目录下执行时会报错，除非使用-f Compose文件来明确指定Compose文件。
# 仅拉取镜像，并不创建容器 # 拉取所有服务的镜像 docker-compose pull # 拉取指定服务名的镜像 docker-compose pull myNginx # 校验并查看Compose文件 docker-compose config # 仅校验Compose文件不打印输出 docker-compose config -q # 为服务构建、（重新）创建、启动和附加到容器 docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...] # 常用参数如下： # -d 在后台运行容器 docker-compose up -d # --force-recreate 即使容器的配置和映像没有更改，也要重新创建容器。 docker-compose up --force-recreate # --no-recreate 如果容器已经存在，请不要重新创建它们。 docker-compose up --no-recreate # --no-start 创建服务后不要启动它们。原命令docker-compose create已废弃改为使用： docker-compose up --no-start # --scale 指定某服务启动几个容器，将覆盖Compose文件中的scale设置 docker-compose up -d --scale myNginx=2 # 查看允许中的容器 docker-compose ps # 查看所有容器 docker-compose ps -a # 启动服务的现有容器 docker-compose start [SERVICE.</description>
    </item>
    
    <item>
      <title>npm</title>
      <link>https://hongmao.run/cmd/nodejs/02-npm/</link>
      <pubDate>Thu, 02 Sep 2021 23:29:20 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/nodejs/02-npm/</guid>
      <description># 查看npm版本 npm -v # 查看帮助 npm # 或 npm help # 查看某个命令的帮助信息 npm help 命令 # 例如： npm help install 配置相关 # 查看npm配置信息 npm config ls -l # 查看npm某项配置的值 npm config get registry # 设置npm某项配置的值 npm config set registry https://registry.npm.taobao.org/ # 取消设置某项配置的值(删除key为registry的配置) npm config delete registry 包相关 # 搜索包，如果自己更换成了淘宝的源，则在查询时需指定如下源 npm search 包名 --registry=https://registry.npmjs.org/ # 例如： npm search hexo-cli --registry=https://registry.npmjs.org/ # 当前项目安装指定包 npm install 包名 # 例如： npm install hexo-cli # 如果想全局安装： npm install -g hexo-cli # 查看当前项目安装的包 npm list # 查看全局安装的包 npm list -g # 查看当前项目已安装的指定包的信息 npm list 包名 # 查看全局安装的加上-g，例如：查看全局安装的npm包相关信息 npm list -g npm # 卸载全局安装的指定包 npm uninstall -g 包名 # 例如： npm uninstall -g gitbook-cli # 查看全局安装的待更新的包 npm outdated -g # 更新全局安装的指定包 npm update -g 包名 # 例如： npm update -g npm # 更新所有全局安装的可更新的包 npm update -g </description>
    </item>
    
    <item>
      <title>ps</title>
      <link>https://hongmao.run/cmd/linux/03-ps/</link>
      <pubDate>Mon, 25 Jul 2022 18:20:27 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/linux/03-ps/</guid>
      <description>ps是英文“process status”的缩写，顾名思义是显示当前进程的状态。
# 查看ps版本 ps --version # 查看帮助 ps --help &amp;lt;simple|list|output|threads|misc|all&amp;gt; # 或者 ps --help &amp;lt;s|l|o|t|m|a&amp;gt; # 再或者，更详细的ps文档： man ps # 查看全部进程信息 ps -ef # 或 ps -el # -l 代表长格式，输出内容更多 # 或 ps aux # 注意：不是ps -aux 常用选项 -e：展示所有的进程，等同于-A。
-f：以完整格式输出，包括命令行（包括参数）。
列 说明 UID 创建进程的账户，例如：root PID 进程ID PPID 父进程ID C 代表CPU使用率，单位为百分比。 STIME 进程的启动时间。 TTY 登录者的终端位置，若为远程登录则使用动态终端接口名称（pts/n） TIME 此进程实际花费CPU运行的时间。 CMD 创建此进程的命令名（带参数）。 -l：以长格式输出，输出项比-f更多，但又有区别，比如-l就不会展示命令的参数。
列 说明 F 进程标识，说明此进程的权限。“4”表示此进程的权限为root，“1”表示此子进程仅执行了复制，而并未执行。 S 进程状态，R表示该进程正在运行中，S表示该进程正处在睡眠状态但可以被唤醒，D表示该进程处在不可被唤醒的睡眠状态，通常该线程可能在等待IO，T表示停止状态，Z表示僵尸状态，即进程已经终止但无法被从内存中删除（这样看的话，“僵尸”这个名字还真是贴切） UID 运行该进程的用户ID。 PID 该进程的ID。 PPID 父进程的ID C 代表CPU使用率，单位为百分比。 PRI Priority的缩写，与进程优先级有关。 NI Nice的缩写，与进程优先级有关。 ADDR kernel function，指出该进程在内存的哪个部分。 SZ 代表此进程用掉了多少内存。 WCHAN 标识当前进程是否运行，-表示正在运行。 TTY 登录者的终端位置，若为远程登录则使用动态终端接口名称（pts/n） TIME 此进程实际花费CPU运行的时间。 CMD 创建此进程的命令名（不带参数）。 -u：筛选指定用户创建的进程，例如：筛选“root”创建的进程：ps -u root。 ​</description>
    </item>
    
    <item>
      <title>Dockerfile操作</title>
      <link>https://hongmao.run/cmd/docker/03-docker-file/</link>
      <pubDate>Tue, 05 Oct 2021 10:56:54 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/docker/03-docker-file/</guid>
      <description>参考hello-world的Dockerfile写了一个简单的类似的：
Dockerfile：
FROM ubuntu COPY hello.sh / CMD [&amp;#34;sh&amp;#34;, &amp;#34;/hello.sh&amp;#34;] hello.sh：
echo &amp;#34;Hello, hongmao&amp;#34; 参考资料
Dockerfile reference | Docker Documentation </description>
    </item>
    
    <item>
      <title>ls</title>
      <link>https://hongmao.run/cmd/linux/04-ls/</link>
      <pubDate>Sat, 06 Aug 2022 11:51:21 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/linux/04-ls/</guid>
      <description>ls是英文“list”的缩写，用于列出指定目录下的内容。
# 查看ls的帮助信息 ls --help # 或 man ls # 查看ls版本 ls --version # 主要用法 ls [选项] [目录] # 列出所有文件及目录 ls -a # 以全格式输出文件及目录的信息 ls -al # 以更易读的全格式输出文件及目录的信息 ls -ahl # 另：很多Linux发行版中会指定别名 ll -&amp;gt; ls -l 常用选项 -a：此处a是“all”的简写，意为列出所有文件（及目录），包括.开头的隐藏文件（或目录），甚至包括.和..目录。（.代表当前目录，..代表上层目录）
-A：类似-a，但不列出.和..
-i：打印出每个文件的索引号。
-l：以长格式输出结果。输出的列说明如下：
列 说明 第一列 文件类型及权限信息。类似：drwxr-xr-x，一共10位，第一位是文件类型，d表示类星是目录，l代表软链接文件，-代表常规文件。剩下的9位，每3位一组，分别代表：用户权限、用户组权限、其他用户权限，若读(read)、写(write)、执行(execute)的权限全有，则为rwx，若只有读写权限，则为rw-。 第二列 引用计数，若是文件，则该计数指该文件的硬链接数；若是目录，则该计数该表该目录的一级子目录个数。 第三列 文件或目录的所有者。 第四列 文件或目录所属的组。 第五列 表示文件或目录大小，单位是字节。如果不方便查看，可以加上-h选项，这样该列的输出方式就类似：4.0k这种，而非：4096 第六列 最后修改时间。 第七列 文件名或目录名。 -h：代指“human readable”，以人类更易读的方式进行输出，例如原本输出文件大小是以字节为单位，加上此选项后，将以类似“4k”、“5M”这种格式进行输出。
-m：用逗号分隔文件。
-1：输出时一个文件占1行，注意是数字1，而非字母l。</description>
    </item>
    
    <item>
      <title>tar</title>
      <link>https://hongmao.run/cmd/linux/05-tar/</link>
      <pubDate>Sat, 06 Aug 2022 11:51:28 +0800</pubDate>
      
      <guid>https://hongmao.run/cmd/linux/05-tar/</guid>
      <description>tar命令是英文“tape archive”的缩写，用于打包或还原（解压缩）文件。
# 查看帮助 tar --help # 查看版本 tar --version # 使用gzip压缩、打包文件，将a.txt、b.txt打包进test.tar.gz tar -czvf test.tar.gz a.txt b.txt # 使用gzip解压缩， tar -zxvf test.tar.gz 常用选项 -c：创建一个新归档，“c”是“create”的缩写。 -f：“f”指“file”的意思，用于指定备份文件，一般该选项应该放在最后，例如：tar -cf a a.txt意为将“a.txt”打包进“a”，而不能是：tar -fc a a.txt。 -v：显示执行过程。 -t：列出备份文件中的内容。 -x：从备份文件中还原文件。 -z：使用gzip指令处理备份文件。 </description>
    </item>
    
  </channel>
</rss>
